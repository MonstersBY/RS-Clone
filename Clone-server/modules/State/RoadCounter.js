export default function roadCounter(map, player) {
  const allPathsLength = [] // Al paths leads to conflict üê±‚Äçüèç

  player.roads.forEach((road) => {
    allPathsLength.push( recursiveCounter(map, player.color, road, []).length );
  })

  return allPathsLength.sort((a, b) => b - a)[0];
}

function recursiveCounter(map, playerColor, id, initialChain = [], prevRoads = []) {
  /* –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É, —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞, id —Ç–µ–∫—É—â–µ–π –¥–æ—Ä–æ–≥–∏, —Ü–µ–ø—å –µ—ë –ø—Ä–µ–¥–∫–æ–≤ –∏ —Å–æ—Å–µ–¥–µ–π –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—Ä–µ–¥–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Ö–æ–¥–∏—Ç—å –∫—Ä—É–≥–∞–º–∏ */
  if (initialChain.includes(id)) {
    return [] // dead end
  }
  const chain = [...initialChain];

  const hex = id.split("_")[0];
  const hode = "road_" + id.split("_")[2];

  if (map[hex][hode].player !== playerColor) { 
    return []; // dead end
  }
  // –û—Ç—Å–µ–∫–∞–µ–º —Ç—É–ø–∏–∫–∏ –∏ –º–æ–º–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ–º —Å–µ–±–µ –Ω–∞ —Ö–≤–æ—Å—Ç, –∫–ª–∞–¥—ë–º –¥–æ—Ä–æ–≥—É –≤ —Ü–µ–ø—å
  chain.push(id);

  const nearNodes = map[hex][hode].nextNodes;
  const nearRoadsSet = new Set();

  for (let i = 0; i < nearNodes.length; i++) {
    const hex = nearNodes[i].split("_")[0];
    const settlementId = "settlement_" + nearNodes[i].split("_")[2];
    for (const node of map[hex][settlementId].nextNodes) {
      nearRoadsSet.add(node);
    }
  }
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
  const nearRoadsToTransfer = [...nearRoadsSet];
  const nearRoadsToUse = []; 
  for (const node of prevRoads) {
    nearRoadsSet.delete(node);
  }
  nearRoadsToUse.push(...nearRoadsSet);
  // –ò –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –Ω–∏—Ö —Ü–µ–ø—å
 const allPaths = [];
  nearRoadsToUse.forEach((road) => {
    const path = recursiveCounter(map, playerColor, road, chain, nearRoadsToTransfer);
    allPaths.push(path);
  })
  chain.push(...allPaths.sort((pathCurr, pathNext) => pathNext.length - pathCurr.length)[0]);

  return [...new Set(chain)];
}
