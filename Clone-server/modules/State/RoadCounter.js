export default function roadCounter(map, player) {
  const allPathsLength = [] // Al paths leads to conflict üê±‚Äçüèç

  // console.log(player.color, "–∏–º–µ–µ—Ç —Ç–∞–∫–∏–µ –¥–æ—Ä–æ–≥–∏: ", player.roads);
  player.roads.forEach((road) => {
    allPathsLength.push( recursiveCounter(map, player.color, road, []).length );
  })

  // console.log("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö –¥–æ—Ä–æ–≥: ", allPathsLength.sort((a, b) => b - a));
  return allPathsLength.sort((a, b) => b - a)[0];
}

function recursiveCounter(map, playerColor, id, initialChain = [], prevRoads = [], n = 0) {
  // console.log(" ".repeat(n),"_________________________________________")
  // console.log(" ".repeat(n),"–Ø –¥–æ—Ä–æ–≥–∞:", id);
  // –ï—Å–ª–∏ —É–∑–µ–ª —É–∂–µ –≤ —Ü–µ–ø–æ—á–∫–µ - —ç—Ç–æ —Ç—É–ø–∏–∫
  if (initialChain.includes(id)) {
    // console.log(" ".repeat(n), "eat my tail")
    // console.log(" ".repeat(n),"_________________________________________")
    return []
  }
  const chain = [...initialChain];

  // –ë–µ—Ä—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É–∑–µ–ª
  const hex = id.split("_")[0];
  const hode = "road_" + id.split("_")[2];

  // –ï—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç –¥–æ—Ä–æ–≥–∏ –Ω—É–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ - —ç—Ç–æ —Ç—É–ø–∏–∫
  if (map[hex][hode].player !== playerColor) { 
    // console.log(" ".repeat(n), "dead end")
    // console.log(" ".repeat(n),"_________________________________________")
    return [];
  }

  // –ö–ª–∞–¥—ë–º –µ–≥–æ –∏–º—è –≤ —Ü–µ–ø–æ—á–∫—É
  chain.push(id);
  // console.log(" ".repeat(n), "–ú–æ—è —Ü–µ–ø—å:", chain);

  // –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ (–ø–æ—Å–µ–ª–µ–Ω–∏—è)
  const nearNodes = map[hex][hode].nextNodes;
  // –ó–∞–≤–æ–¥–∏–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–æ—Ä–æ–≥
  const nearRoadsSet = new Set();

  // –ö–ª–∞–¥—ë–º –≤ set nearRoads –±–ª–∏–∂–∞–π—â–∏–µ –¥–æ—Ä–æ–≥–∏
  for (let i = 0; i < nearNodes.length; i++) {
    const hex = nearNodes[i].split("_")[0];
    const settlementId = "settlement_" + nearNodes[i].split("_")[2];
    for (const node of map[hex][settlementId].nextNodes) {
      nearRoadsSet.add(node);
    }
  }

  // –≠—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Ä–æ–≥–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É —á—Ç–æ–±—ã –æ–Ω —à—ë–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const nearRoadsToTransfer = [...nearRoadsSet];

  // –ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±—É–¥–µ–º —Ç–µ—Ö —Å–æ—Å–µ–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–∑–ª–∞
  const nearRoadsToUse = []; 
  // –ü–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º –∏–∑ set –¥–æ—Ä–æ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—è
  for (const node of prevRoads) {
    nearRoadsSet.delete(node);
  }
  // // –ò —É–¥–∞–ª—è–µ–º –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—É—â—É—é –¥–æ—Ä–æ–≥—É
  // nearRoadsSet.delete(id);
  // –ö–ª–∞–¥—ë–º —ç—Ç–æ –≤—Å—ë –≤ array
  nearRoadsToUse.push(...nearRoadsSet);

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–µ–¥–∏–¥—É—â–∏–µ –¥–æ—Ä–æ–≥–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å–µ–¥–µ–π, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
  // prevRoads.push(...nearRoads);
  // prevRoads.push(id);
  // console.log(" ".repeat(n), "–Ø –ø—Ä–æ–≤–µ—Ä—é:", nearRoadsToUse);

 const allPaths = [];
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è–º
  nearRoadsToUse.forEach((road) => {
    // console.log("NEW: ", road);
    const path = recursiveCounter(map, playerColor, road, chain, nearRoadsToTransfer, n + 4);
    // console.log(" ".repeat(n), "–í–æ—Ç –ø—É—Ç—å –æ—Ç –º–µ–Ω—è:", path)
    // –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –≤–µ—Ç–∫–∏ –±–æ–ª—å—à–µ 0 –∏ –¥—Ä—É–≥–∏—Ö
    // console.log(" ".repeat(n), "–º–æ—è —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–Ω–∞: ", path.length);
    allPaths.push(path);
  })
  // console.log(" ".repeat(n), "–í–æ—Ç –≤—Å–µ –ø—É—Ç–∏:", allPaths.sort((pathCurr, pathNext) => pathCurr.length - pathNext.length))
  chain.push(...allPaths.sort((pathCurr, pathNext) => pathNext.length - pathCurr.length)[0]);

  // console.log(" ".repeat(n), "–Ø –≤–æ–∑–≤—Ä–∞—â–∞—é:", [...new Set(chain)]);
  // console.log(" ".repeat(n),"_________________________________________")
  return [...new Set(chain)]; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–æ—Ä–æ–≥ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
}
